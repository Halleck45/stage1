<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- misc services -->
        <service id="app_core.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch" />

        <service id="app_core.build_scheduler" class="App\CoreBundle\BuildScheduler">
            <argument type="service" id="logger" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="old_sound_rabbit_mq.build_producer" />
            <argument type="service" id="old_sound_rabbit_mq.websocket_producer" />
            <argument type="service" id="app_core.message.factory" />
        </service>

        <service id="session.handler.redis" class="Drak\NativeSession\NativeRedisSessionHandler">
            <argument>tcp://%redis_host%:%redis_port%?auth=%redis_password%</argument>
        </service>

        <service id="app_core.message.factory" class="App\CoreBundle\Message\MessageFactory">
            <argument type="service" id="router" />
        </service>
        
        <service id="app_core.redis" class="Redis">
            <call method="connect">
                <argument>%redis_host%</argument>
                <argument>%redis_port%</argument>
            </call>
            <call method="auth">
                <argument>%redis_password%</argument>
            </call>
        </service>

        <service id="app_core.client.github" class="Guzzle\Http\Client">
            <argument>%github_api_base_url%</argument>
        </service>

        <service id="app_core.docker.http_client" class="Docker\Http\Client">
            <argument>%docker_api_base_url%</argument>
        </service>

        <service id="app_core.docker" class="Docker\Docker">
            <argument type="service" id="app_core.docker.http_client" />
        </service>

        <service id="app_core.discover.github" class="App\CoreBundle\Discover\Github">
            <argument type="service" id="app_core.client.github" />
            <argument type="service" id="logger" />
        </service>

        <service id="app_core.github.import" class="App\CoreBundle\Github\Import">
            <argument type="service" id="app_core.client.github" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="app_core.redis" />
            <argument type="service" id="router" />
            
            <call method="setFeatureIpAccessList">
                <argument>%feature_ip_access_list%</argument>
                <argument>%feature_token_access_list%</argument>
            </call>
        </service>

        <service id="app_core.builder" class="App\CoreBundle\Builder\Builder">
            <argument type="service" id="logger" />
            <argument type="service" id="app_core.docker" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="app_core.client.github" />

            <tag name="monolog.logger" channel="build" />

            <call method="setOption">
                <argument>dummy</argument>
                <argument>%stage1_dummy_build%</argument>
            </call>

            <call method="setOption">
                <argument>dummy_duration</argument>
                <argument>%stage1_dummy_build_duration%</argument>
            </call>
        </service>

        <!-- rabbitmq consumers -->

        <service id="app_core.consumer.build" class="App\CoreBundle\Consumer\BuildConsumer">
            <argument type="service" id="logger" />
            <argument type="service" id="event_dispatcher" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="app_core.builder" />
            <argument type="service" id="app_core.docker" />
            <argument>%build_host_mask%</argument>
            <call method="setTimeout">
                <argument>%stage1_build_timeout%</argument>
            </call>

            <tag name="monolog.logger" channel="build" />
        </service>

        <service id="app_core.consumer.kill" class="App\CoreBundle\Consumer\KillConsumer">
            <argument type="service" id="logger" />
            <argument type="service" id="app_core.docker" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="app_core.message.factory" />
            <argument type="service" id="old_sound_rabbit_mq.websocket_producer" />
            <argument type="service" id="router" />
            <tag name="monolog.logger" channel="build" />
        </service>

        <service id="app_core.consumer.project_import" class="App\CoreBundle\Consumer\ProjectImportConsumer">
            <argument type="service" id="app_core.github.import" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="old_sound_rabbit_mq.websocket_producer" />
            <argument type="service" id="router" />
        </service>

        <service id="app_core.consumer.docker_output" class="App\CoreBundle\Consumer\DockerOutputConsumer">
            <argument type="service" id="logger" />
            <argument type="service" id="app_core.redis" />
            <tag name="monolog.logger" channel="build" />
        </service>

        <!-- build listeners -->

        <service id="app_core.listener.build.build_routing" class="App\CoreBundle\EventListener\Build\BuildRoutingListener">
            <argument type="service" id="logger" />
            <argument type="service" id="app_core.redis" />
            <argument>%build_host_mask%</argument>
            <tag name="monolog.logger" channel="build" />
            <tag name="kernel.event_listener" priority="100" event="build.finished" />
        </service>

        <service id="app_core.listener.build.previous_build" class="App\CoreBundle\EventListener\Build\PreviousBuildListener">
            <argument type="service" id="logger" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="app_core.docker" />
            <tag name="monolog.logger" channel="build" />
            <tag name="kernel.event_listener" priority="0" event="build.finished" />
        </service>

        <service id="app_core.listener.build.containers_limit" class="App\CoreBundle\EventListener\Build\ContainersLimitListener">
            <argument type="service" id="logger" />
            <argument type="service" id="doctrine" />
            <argument type="service" id="app_core.docker" />
            <argument>%stage1_running_containers_per_user%</argument>

            <tag name="monolog.logger" channel="build" />

            <!-- this listener must always be executed AFTER the previous_build listener -->
            <tag name="kernel.event_listener" priority="-1" event="build.finished" />
        </service>

        <service id="app_core.listener.build.demo_email" class="App\CoreBundle\EventListener\Build\BuildDemoEmailListener">
            <argument type="service" id="logger" />
            <argument type="service" id="mailer" />
            <tag name="monolog.logger" channel="build" />
            <tag name="kernel.event_listener" priority="-100" event="build.finished" method="onBuildFinished" />
        </service>

        <service id="app_core.listener.build.stopwatch" class="App\CoreBundle\EventListener\Build\BuildStopwatchListener">
            <argument type="service" id="logger" />
            <argument type="service" id="app_core.stopwatch" />
            <tag name="monolog.logger" channel="build" />
            <tag name="kernel.event_listener" priority="255" event="build.started" method="onBuildStarted" />
            <tag name="kernel.event_listener" priority="-200" event="build.finished" method="onBuildFinished" />
        </service>

        <service id="app_core.listener.build.websocket_messages" class="App\CoreBundle\EventListener\Build\BuildWebsocketMessagesListener">
            <argument type="service" id="logger" />
            <argument type="service" id="old_sound_rabbit_mq.websocket_producer" />
            <argument type="service" id="app_core.message.factory" />
            <tag name="monolog.logger" channel="build" />
            <tag name="kernel.event_listener" priority="255" event="build.started" method="onBuildStarted" />
            <tag name="kernel.event_listener" priority="-255" event="build.finished" method="onBuildFinished" />
            <tag name="kernel.event_listener" priority="-255" event="build.killed" method="onBuildKilled" />
        </service>

        <!-- kernel listeners -->

        <service id="app_core.listener.configure" class="App\CoreBundle\EventListener\ConfigureListener">
            <argument>%configured%</argument>
            <argument type="service" id="app_core.controller.configure" />
            <tag name="kernel.event_listener" event="kernel.controller" method="onKernelController" />
        </service>

        <service id="app_core.listener.project_access_table" class="App\CoreBundle\EventListener\ProjectAccessTableListener">
            <argument type="service" id="app_core.redis" />
            <argument type="service" id="session" />
            <tag name="kernel.event_listener" event="security.interactive_login" method="onLogin" />
        </service>

        <!-- doctrine listeners -->

        <service id="app_core.subscriber.websocket_routing_table" class="App\CoreBundle\EventListener\WebsocketRoutingTableSubscriber">
            <argument type="service" id="logger" />
            <argument type="service" id="app_core.redis" />
            <tag name="doctrine.event_subscriber" connection="default" />
        </service>

        <service id="app_core.subscriber.build_branch_relation" class="App\CoreBundle\EventListener\BuildBranchRelationSubscriber">
            <argument type="service" id="logger" />
            <argument type="service" id="doctrine" />
            <tag name="doctrine.event_subscriber" connection="default" />
        </service>

        <service id="app_core.subscriber.project_access_table" class="App\CoreBundle\EventListener\ProjectAccessTableSubscriber">
            <argument type="service" id="app_core.redis" />
            <argument type="service" id="logger" />
            <tag name="doctrine.event_subscriber" connection="default" />
        </service>

        <service id="app_core.subscriber.hipache_routing_table" class="App\CoreBundle\EventListener\HipacheRoutingTableSubscriber">
            <argument type="service" id="app_core.redis" />
            <argument type="service" id="logger" />
            <tag name="doctrine.event_subscriber" connection="default" />
        </service>

        <service id="app_core.subscriber.entity.channel" class="App\CoreBundle\EventListener\EntityChannelSubscriber">
            <argument>%kernel.environment%</argument>
            <tag name="doctrine.event_subscriber" connection="default" />
        </service>

        <service id="app_core.subscriber.timestampable" class="App\CoreBundle\EventListener\TimestampableSubscriber">
            <tag name="doctrine.event_subscriber" connection="default" />
        </service>

        <!-- controllers -->

        <service id="app_core.controller.configure" class="App\CoreBundle\Controller\ConfigureController">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <!-- form types -->

        <service id="app_core.form.type.project_settings" class="App\CoreBundle\Form\Type\ProjectSettingsType">
            <tag name="form.type" alias="project_settings" />
        </service>

        <service id="app_core.form.type.project_base_image" class="App\CoreBundle\Form\Type\ProjectBaseImageType">
            <tag name="form.type" alias="project_base_image" />
        </service>

        <service id="app_core.form.type.project_access" class="App\CoreBundle\Form\Type\ProjectAccessType">
            <tag name="form.type" alias="project_access" />
        </service>

        <service id="app_core.form.type.project_access_delete" class="App\CoreBundle\Form\Type\ProjectAccessDeleteType">
            <tag name="form.type" alias="project_access_delete" />
        </service>

        <service id="app_core.form.type.project_master_password" class="App\CoreBundle\Form\Type\ProjectMasterPasswordType">
            <tag name="form.type" alias="project_master_password" />
        </service>

        <!-- twig extension -->

        <service id="twig.extension.text" class="Twig_Extensions_Extension_Text">
            <tag name="twig.extension" />
        </service>
    </services>
</container>
